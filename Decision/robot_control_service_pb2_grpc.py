# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import robot_control_service_pb2 as robot__control__service__pb2


class robot_control_handlerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.robot_move_forward = channel.unary_unary(
                '/robot_control.robot_control_handler/robot_move_forward',
                request_serializer=robot__control__service__pb2.Empty.SerializeToString,
                response_deserializer=robot__control__service__pb2.Empty.FromString,
                )
        self.robot_move_backward = channel.unary_unary(
                '/robot_control.robot_control_handler/robot_move_backward',
                request_serializer=robot__control__service__pb2.Empty.SerializeToString,
                response_deserializer=robot__control__service__pb2.Empty.FromString,
                )
        self.robot_turn_right = channel.unary_unary(
                '/robot_control.robot_control_handler/robot_turn_right',
                request_serializer=robot__control__service__pb2.Empty.SerializeToString,
                response_deserializer=robot__control__service__pb2.Empty.FromString,
                )
        self.robot_turn_left = channel.unary_unary(
                '/robot_control.robot_control_handler/robot_turn_left',
                request_serializer=robot__control__service__pb2.Empty.SerializeToString,
                response_deserializer=robot__control__service__pb2.Empty.FromString,
                )
        self.robot_break = channel.unary_unary(
                '/robot_control.robot_control_handler/robot_break',
                request_serializer=robot__control__service__pb2.Empty.SerializeToString,
                response_deserializer=robot__control__service__pb2.Empty.FromString,
                )
        self.robot_set_speed = channel.unary_unary(
                '/robot_control.robot_control_handler/robot_set_speed',
                request_serializer=robot__control__service__pb2.speed_message.SerializeToString,
                response_deserializer=robot__control__service__pb2.Empty.FromString,
                )


class robot_control_handlerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def robot_move_forward(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def robot_move_backward(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def robot_turn_right(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def robot_turn_left(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def robot_break(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def robot_set_speed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_robot_control_handlerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'robot_move_forward': grpc.unary_unary_rpc_method_handler(
                    servicer.robot_move_forward,
                    request_deserializer=robot__control__service__pb2.Empty.FromString,
                    response_serializer=robot__control__service__pb2.Empty.SerializeToString,
            ),
            'robot_move_backward': grpc.unary_unary_rpc_method_handler(
                    servicer.robot_move_backward,
                    request_deserializer=robot__control__service__pb2.Empty.FromString,
                    response_serializer=robot__control__service__pb2.Empty.SerializeToString,
            ),
            'robot_turn_right': grpc.unary_unary_rpc_method_handler(
                    servicer.robot_turn_right,
                    request_deserializer=robot__control__service__pb2.Empty.FromString,
                    response_serializer=robot__control__service__pb2.Empty.SerializeToString,
            ),
            'robot_turn_left': grpc.unary_unary_rpc_method_handler(
                    servicer.robot_turn_left,
                    request_deserializer=robot__control__service__pb2.Empty.FromString,
                    response_serializer=robot__control__service__pb2.Empty.SerializeToString,
            ),
            'robot_break': grpc.unary_unary_rpc_method_handler(
                    servicer.robot_break,
                    request_deserializer=robot__control__service__pb2.Empty.FromString,
                    response_serializer=robot__control__service__pb2.Empty.SerializeToString,
            ),
            'robot_set_speed': grpc.unary_unary_rpc_method_handler(
                    servicer.robot_set_speed,
                    request_deserializer=robot__control__service__pb2.speed_message.FromString,
                    response_serializer=robot__control__service__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'robot_control.robot_control_handler', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class robot_control_handler(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def robot_move_forward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/robot_control.robot_control_handler/robot_move_forward',
            robot__control__service__pb2.Empty.SerializeToString,
            robot__control__service__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def robot_move_backward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/robot_control.robot_control_handler/robot_move_backward',
            robot__control__service__pb2.Empty.SerializeToString,
            robot__control__service__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def robot_turn_right(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/robot_control.robot_control_handler/robot_turn_right',
            robot__control__service__pb2.Empty.SerializeToString,
            robot__control__service__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def robot_turn_left(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/robot_control.robot_control_handler/robot_turn_left',
            robot__control__service__pb2.Empty.SerializeToString,
            robot__control__service__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def robot_break(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/robot_control.robot_control_handler/robot_break',
            robot__control__service__pb2.Empty.SerializeToString,
            robot__control__service__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def robot_set_speed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/robot_control.robot_control_handler/robot_set_speed',
            robot__control__service__pb2.speed_message.SerializeToString,
            robot__control__service__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
